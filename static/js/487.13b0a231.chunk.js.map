{"version":3,"file":"static/js/487.13b0a231.chunk.js","mappings":"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","sources":["components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://samurai-way/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://samurai-way/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/Post/AddPostForm.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","hoc/withAuthRedirect.tsx","../node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js"],"sourcesContent":["import React, {useEffect, useState} from 'react';\n\ntype ProfileStatusWithHooksPropsType = {\n    status: string\n    updateStatus: (status: string) => void\n}\n\nconst ProfileStatusWithHooks = (props: ProfileStatusWithHooksPropsType) => {\n    // state = {\n    //     editMode: false,\n    //     status: this.props.status\n    // }\n    // activateEditMode = () => {\n    //     this.setState({\n    //         editMode: true\n    //     })\n    // }\n    // deactivateEditMode = () => {\n    //     this.setState({\n    //         editMode: false\n    //     })\n    //     this.props.updateStatus(this.state.status)\n    // }\n    // onStatusChange = (e: any) => {\n    //     this.setState({\n    //         status: e.currentTarget.value\n    //     })\n    // }\n    // componentDidUpdate(prevProps: Readonly<ProfileStatusPropsType>, prevState: Readonly<{}>) {\n    //     console.log('componentDidUpdate')\n    //     if (prevProps.status !== this.props.status) {\n    //         this.setState({\n    //             status: this.props.status\n    //         })\n    //     }\n    // }\n\n    const [editMode, setEditMode] = useState(false)\n    const [status, setStatus] = useState(props.status)\n\n    useEffect(()=> {\n        setStatus(props.status)\n    }, [props.status])\n    const activateEditMode = () => {\n        setEditMode(true)\n    }\n    const deactivateEditMode = () => {\n        setEditMode(false)\n        props.updateStatus(status)\n    }\n    const onStatusChange = (e:any) => {\n        setStatus(e.currentTarget.value)\n    }\n\n    return (\n            <div>\n                {!editMode && <div>\n                    <span onDoubleClick={activateEditMode}>{props.status || '------'}</span>\n                </div>}\n                {editMode && <div>\n                    <input onChange={onStatusChange} autoFocus={true} onBlur={deactivateEditMode} value={status}/>\n                </div>}\n            </div>\n        );\n\n\n};\n\nexport default ProfileStatusWithHooks;","import React from 'react';\nimport s from './ProfileInfo.module.css';\nimport {UserProfileType} from \"../../../redux/profile-reducer\";\nimport Preloader from \"../../common/preloader/Preloader\";\nimport ProfileStatus from \"./ProfileStatus\";\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\n\ntype ProfileInfoPropsType = {\n    profile: UserProfileType        //!!!!!!!!!!!\n    status: string\n    updateStatus: (status: string) => void\n}\nconst ProfileInfo = (props: ProfileInfoPropsType) => {\n    if (!props.profile) {\n        return <Preloader/>\n    }\n    return (\n        <div>\n            <div>\n                {/*<img*/}\n                {/*    src=\"https://images.all-free-download.com/images/graphiclarge/beach_cloud_dawn_horizon_horizontal_landscape_ocean_601821.jpg\"*/}\n                {/*    alt=\"sky\"/>*/}\n            </div>\n            <div>\n                <img src={props.profile.photos.large} alt=\"user photo\"/>\n            </div>\n            {/*<ProfileStatus status={props.status} updateStatus={props.updateStatus}/>*/}\n            <ProfileStatusWithHooks status={props.status} updateStatus={props.updateStatus}/>\n        </div>\n    );\n\n};\n\nexport default ProfileInfo;","// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"MyPosts_postsBlock__lB-pf\",\"posts\":\"MyPosts_posts__GSiZ2\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__Yu4oG\"};","import React from 'react';\nimport s from './Post.module.css';\n\ntype PostType = {\n    message: string\n    likesCount: number\n}\nconst Post = (props: PostType) => {\n    return (\n        <div className={s.item}>\n            <img src=\"https://cdn-icons-png.flaticon.com/512/3135/3135715.png\" alt=\"avatar\"/>\n            {props.message}\n            <div>\n                <span>{props.likesCount} likes</span>\n            </div>\n\n        </div>\n    );\n};\n\nexport default Post;","import React from 'react';\nimport { Form, Field } from 'react-final-form'\n\ntype AddPostFormPropsType = {\n    addPost: (newPostText: string) => void\n}\ntype FormValues = {\n    newPostText: string\n}\nconst AddPostForm = (props: AddPostFormPropsType) => {\n    const onAddPost = (formData: FormValues) => {\n        props.addPost(formData.newPostText)\n    }\n\n    return <Form\n        onSubmit={onAddPost}\n        // validate={validate}\n        render={({handleSubmit}) => (\n            <form onSubmit={handleSubmit}>\n                <div>\n                    <Field name={'newPostText'} type={'textarea'} component={'textarea'} placeholder={'Type post'}/>\n                </div>\n                <button type={'submit'}>Add post</button>\n            </form>\n        )}\n    />\n}\n\n\nexport default AddPostForm;\n\n\n","import React from 'react';\nimport {MyPosts} from \"./MyPosts\";\nimport {\n    addPostAC,\n    addPostActionType,\n} from \"../../../redux/profile-reducer\";\nimport {StatesType, StoreType} from \"../../../redux/store\";\nimport {connect} from \"react-redux\";\nimport {\n    addMessageActionType,\n} from \"../../../redux/dialogs-reducer\";\n\ntype MyPostsContainerType = {\n    store: StoreType\n}\n\nconst mapStateToProps = (state: StatesType) => {\n    return {\n        newPostText: state.profilePage.newPostText,\n        posts: state.profilePage.posts\n    }\n}\nconst mapDispatchToProps = (dispatch: (action: addPostActionType | addMessageActionType)=>void) => {\n    return {\n        addPost: (newPostText: string) => {\n            dispatch(addPostAC(newPostText))\n        }\n    }\n}\nexport const MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\n\n// export const MyPostsContainer = (props: MyPostsContainerType) => {\n//     const state = props.store.getState()\n//     const addPost = () => {\n//         props.store.dispatch(addPostAC())\n//     }\n//     const onPostChange = (text: string) => {\n//         props.store.dispatch(updateNewPostTextAC(text))\n//     }\n//     return <MyPosts posts={state.profilePage.posts}\n//                     addPost={addPost}\n//                     updateNewPostText={onPostChange}\n//                     newPostText={state.profilePage.newPostText }/>\n// }","import React from 'react';\nimport s from './MyPosts.module.css';\nimport Post from \"./Post/Post\";\nimport {PostsType} from \"../../../redux/profile-reducer\";\nimport AddPostForm from \"./Post/AddPostForm\";\n\ntype MyPostsType = {\n    posts: PostsType[]\n    addPost: (newPostText: string) => void\n    newPostText: string\n}\nexport const MyPosts = (props: MyPostsType) => {\n    const postsElements =\n        props.posts.map(p => <Post key={p.id} message={p.message} likesCount={p.likesCount}/>)\n    const addPost = (newPostText: string) => {\n        props.addPost(newPostText);\n    }\n\n    return (\n        <div className={s.postsBlock}>My posts\n            <div>\n                <AddPostForm addPost={addPost}/>\n            </div>\n            <div>\n                New post\n            </div>\n            <div className={s.posts}>\n                {postsElements}\n            </div>\n\n        </div>\n    );\n};\n\n\n\n\n// const onPostChange = () => {\n//     if (newPostElement.current) {\n//         const text = newPostElement.current.value;\n//         props.updateNewPostText(text)\n//         // props.dispatch(updateNewPostTextAC(text))\n//     }\n// }","import React from 'react';\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\nimport {MyPostsContainer} from \"./MyPosts/MyPostsContainer\";\nimport {UserProfileType} from \"../../redux/profile-reducer\";\n\ntype ProfilePropsType = {\n    profile: UserProfileType         //!!!!!!!!!!!!!!!!!\n    status: string\n    updateStatus: (status: string) => void\n}\n\nconst Profile = (props: ProfilePropsType) => {\n    return (\n        <div>\n            <ProfileInfo profile={props.profile} status={props.status} updateStatus={props.updateStatus}/>\n            <MyPostsContainer/>\n        </div>\n    );\n};\n\nexport default Profile;","import React, {ComponentType} from 'react';\nimport Profile from \"./Profile\";\nimport {connect} from \"react-redux\";\nimport {AppRootStateType} from \"../../redux/redux-store\";\nimport {\n    getUserProfileTC, getUserStatusTC,\n    setUserProfileAC, updateUserStatusTC,\n    UserProfileType\n} from \"../../redux/profile-reducer\";\nimport {WithAuthRedirect} from \"../../hoc/withAuthRedirect\";\nimport {compose} from \"redux\";\n\n// export function withRouter(Children: UsersMapPropsType){\n//     return(props: {userId: number})=>{\n//         const match  = {params: useParams()};\n//         return <Children {...props}  match = {match}/>\n//     }\n// }\n\nclass ProfileContainer extends React.Component<UsersMapPropsType> {\n    componentDidMount() {\n        // let userId = this.props.match.params.userId\n        let userId = this.props.profile.userId\n        if (!userId) {\n            userId = 1\n        }\n        this.props.getUserProfile(userId)\n        this.props.getUserStatus(userId)\n    }\n    render() {\n        return (\n            <div>\n                <Profile {...this.props} profile={this.props.profile} status={this.props.status} updateStatus={this.props.updateUserStatus}/>\n            </div>\n        );\n    }\n}\nconst AuthRedirectComponent = WithAuthRedirect(ProfileContainer)\nconst mapStateToProps = (state: AppRootStateType): mapStateToPropsType => ({\n    profile: state.profilePage.profile,\n    status: state.profilePage.status\n})\n// const mapDispatchToProps = (dispatch: (action: setUserProfileActionType) => void): mapDispatchToPropsType => {\n//     return {\n//         setUserProfile: (profile: UserProfileType) => {\n//             dispatch(setUserProfileAC(profile))\n//         }\n//     }\n// }\nconst MapObj = {\n    setUserProfile: setUserProfileAC,\n    getUserProfile: getUserProfileTC,\n    getUserStatus: getUserStatusTC,\n    updateUserStatus: updateUserStatusTC\n}\n\n// types\ntype mapStateToPropsType = {\n    profile: UserProfileType\n    status: string\n}\ntype mapDispatchToPropsType = {\n    setUserProfile: (profile: UserProfileType) => void\n    getUserProfile: (userId: number) => void\n    getUserStatus: (userId: number) => void\n    updateUserStatus: (status: string) => void\n}\nexport type UsersMapPropsType = mapStateToPropsType & mapDispatchToPropsType\n\n// const WithUrlDataContainerComponent = withRouter(ProfileContainer)\nexport default compose<ComponentType>(\n    connect(mapStateToProps, MapObj),\n    WithAuthRedirect)\n(ProfileContainer)\n\n\n","import React, {ComponentType} from 'react';\nimport {Navigate} from \"react-router-dom\";\nimport {AppRootStateType} from \"../redux/redux-store\";\nimport {connect} from \"react-redux\";\nimport {UsersMapPropsType} from \"../components/Profile/ProfileContainer\";\nimport {DialogsMapPropsType} from \"../components/Dialogs/DialogsContainer\";\n\ntype mapStateToPropsType = {\n    isAuth: boolean\n}\nconst mapStateToPropsForRedirect = (state: AppRootStateType): mapStateToPropsType => ({\n    isAuth: state.auth.isAuth\n})\nexport function WithAuthRedirect<T>(Component: ComponentType<T> ) {\n    let RedirectComponent = (props: mapStateToPropsType) => {\n        let {isAuth, ...restProps} = props\n        if (!isAuth) return <Navigate to={'/login'} />\n\n        return <Component {...restProps as T}/>;\n    }\n\n    return connect(mapStateToPropsForRedirect)(RedirectComponent);\n};","import objectWithoutPropertiesLoose from \"./objectWithoutPropertiesLoose.js\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}"],"names":["props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","profile","src","photos","large","alt","Preloader","className","s","message","likesCount","onSubmit","formData","addPost","newPostText","render","handleSubmit","name","type","component","placeholder","MyPostsContainer","connect","state","profilePage","posts","dispatch","addPostAC","postsElements","map","p","id","ProfileContainer","userId","this","getUserProfile","getUserStatus","updateUserStatus","React","MapObj","WithAuthRedirect","setUserProfile","setUserProfileAC","getUserProfileTC","getUserStatusTC","updateUserStatusTC","compose","mapStateToPropsForRedirect","isAuth","auth","Component","restProps","source","excluded","key","i","target","objectWithoutPropertiesLoose","Object","getOwnPropertySymbols","sourceSymbolKeys","length","indexOf","prototype","propertyIsEnumerable","call","to"],"sourceRoot":""}