{"version":3,"file":"static/js/551.e0f2909d.chunk.js","mappings":"0KACA,G,QAAA,CAAgB,QAAU,yBAAyB,YAAc,6BAA6B,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,yBAAyB,YAAc,+B,mBCSrN,EALmB,SAACA,GAChB,OAAO,gBAAKC,UAAWC,EAAAA,OAAW,IAAMA,EAAAA,OAAjC,UACH,SAAC,KAAD,CAASC,GAAI,YAAcH,EAAMI,GAAjC,SAAsCJ,EAAMK,UCGpD,EANgB,SAACL,GACb,OAAO,gBAAKC,UAAWC,EAAAA,QAAhB,SACFF,EAAMM,W,UCsBf,EAnBuB,SAACN,GAIpB,OAAO,SAAC,KAAD,CACHO,SAJiB,SAACC,GAClBR,EAAMS,YAAYD,EAASE,aAK3BC,OAAQ,gBAAEC,EAAF,EAAEA,aAAF,OACJ,kBAAML,SAAUK,EAAhB,WACI,0BACI,SAAC,KAAD,CAAOP,KAAM,aAAcQ,KAAM,WAAYC,UAAW,WAAYC,YAAa,yBAErF,mBAAQF,KAAM,SAAd,SAAwB,gBCaxC,EAzBgB,SAACb,GAEb,IAAMgB,EAAkBhB,EAAMiB,aAAaC,QAAQC,KAAI,SAAAC,GAAC,OAAI,SAAC,EAAD,CAAYf,KAAMe,EAAEf,KAAiBD,GAAIgB,EAAEhB,IAAZgB,EAAEhB,OACvFiB,EAAmBrB,EAAMiB,aAAaK,SAASH,KAAI,SAAAI,GAAC,OAAI,SAAC,EAAD,CAASjB,QAASiB,EAAEjB,QAAoBF,GAAImB,EAAEnB,IAAZmB,EAAEnB,OAKlG,OACI,4BACI,iBAAKH,UAAWC,EAAAA,QAAhB,WACI,gBAAKD,UAAWC,EAAAA,YAAhB,SACKc,KAEL,gBAAKf,UAAWC,EAAAA,SAAhB,SACKmB,QAGT,gBAAKpB,UAAWC,EAAAA,YAAhB,UACI,SAAC,EAAD,CAAgBO,YAfR,SAACC,GACjBV,EAAMwB,WAAWd,Y,oBCqBzB,GAAee,E,QAAAA,KACXC,EAAAA,EAAAA,KAhBoB,SAACC,GACrB,MAAO,CACHV,aAAcU,EAAMV,iBAGD,SAACW,GACxB,MAAO,CACHJ,WAAY,SAACd,GACTkB,GAASC,EAAAA,EAAAA,GAAanB,SAS9BoB,EAAAA,EAFJ,CAGCC,I,mIC5BKC,EAA6B,SAACL,GAAD,MAAmD,CAClFM,OAAQN,EAAMO,KAAKD,SAEhB,SAASH,EAAoBK,GAQhC,OAAOT,EAAAA,EAAAA,IAAQM,EAARN,EAPiB,SAAC1B,GACrB,IAAKiC,EAAwBjC,EAAxBiC,OAAWG,ECdT,SAAkCC,EAAQC,GACvD,GAAc,MAAVD,EAAgB,MAAO,GAC3B,IACIE,EAAKC,EADLC,GAAS,EAAAC,EAAA,GAA6BL,EAAQC,GAElD,GAAIK,OAAOC,sBAAuB,CAChC,IAAIC,EAAmBF,OAAOC,sBAAsBP,GACpD,IAAKG,EAAI,EAAGA,EAAIK,EAAiBC,OAAQN,IACvCD,EAAMM,EAAiBL,GACnBF,EAASS,QAAQR,IAAQ,GACxBI,OAAOK,UAAUC,qBAAqBC,KAAKb,EAAQE,KACxDE,EAAOF,GAAOF,EAAOE,IAGzB,OAAOE,EDCD,CAA6BzC,EAA7B,GACA,OAAKiC,GAEE,SAACE,GAAD,UAAeC,KAFF,SAAC,KAAD,CAAUjC,GAAI","sources":["webpack://samurai-way/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Message/AddMessageForm.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx","hoc/withAuthRedirect.tsx","../node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__oe96H\",\"dialogsItem\":\"Dialogs_dialogsItem__VE52U\",\"active\":\"Dialogs_active__t8cjl\",\"messages\":\"Dialogs_messages__Cg2l+\",\"message\":\"Dialogs_message__ZEWo0\",\"sendMessage\":\"Dialogs_sendMessage__p+Z4w\"};","import React from 'react';\nimport s from './../Dialogs.module.css'\nimport {NavLink} from \"react-router-dom\";\nimport {DialogsType} from \"../../../redux/dialogs-reducer\";\n\nconst DialogItem = (props: DialogsType) => {\n    return <div className={s.dialog + \" \" + s.active}>\n        <NavLink to={\"/dialogs/\" + props.id}>{props.name}</NavLink>\n    </div>\n}\nexport default DialogItem;","import React from 'react';\nimport s from './../Dialogs.module.css'\nimport {MessagesType} from \"../../../redux/dialogs-reducer\";\n\nconst Message = (props: MessagesType) => {\n    return <div className={s.message}>\n        {props.message}\n    </div>\n}\n\nexport default Message;","import React from 'react';\nimport {Field, Form} from \"react-final-form\";\n\ntype FormValues = {\n    newMessage: string\n}\ntype AddMessageFormPropsType = {\n    sendMessage: (newMessage: string) => void\n}\nconst AddMessageForm = (props: AddMessageFormPropsType) => {\n    const onSenMessage = (formData: FormValues) => {\n        props.sendMessage(formData.newMessage)\n    }\n    return <Form\n        onSubmit={onSenMessage}\n        // validate={validate}\n        render={({handleSubmit}) => (\n            <form onSubmit={handleSubmit}>\n                <div>\n                    <Field name={'newMessage'} type={'textarea'} component={'textarea'} placeholder={'Type your message'}/>\n                </div>\n                <button type={'submit'}>Send</button>\n            </form>\n        )}\n    />\n\n};\n\nexport default AddMessageForm;","import React, {ChangeEventHandler} from 'react';\nimport s from './Dialogs.module.css'\nimport DialogItem from \"./DialogItem/DialogItem\";\nimport Message from \"./Message/Message\";\nimport {DialogsMapPropsType} from \"./DialogsContainer\";\nimport {Navigate} from 'react-router-dom'\nimport AddMessageForm from \"./Message/AddMessageForm\";\n\n\nconst Dialogs = (props: DialogsMapPropsType) => {\n\n    const dialogsElements = props.messagesPage.dialogs.map(d => <DialogItem name={d.name} key={d.id} id={d.id}/>)\n    const messagesElements = props.messagesPage.messages.map(m => <Message message={m.message} key={m.id} id={m.id}/>)\n    const sendMessage = (newMessage: string) => {\n        props.addMessage(newMessage)\n    }\n\n    return (\n        <div>\n            <div className={s.dialogs}>\n                <div className={s.dialogsItem}>\n                    {dialogsElements}\n                </div>\n                <div className={s.messages}>\n                    {messagesElements}\n                </div>\n            </div>\n            <div className={s.sendMessage}>\n                <AddMessageForm sendMessage={sendMessage}/>\n            </div>\n        </div>\n    );\n};\n\nexport default Dialogs;\n\n\n//    const onMessageChange = (e: any) => {\n//         const text = e.name; // text area все запорола\n//         props.updateNewMessageText(text)\n//     }","import React, {ComponentType} from 'react';\nimport {StatesType} from \"../../redux/store\";\nimport {\n    addMessageAC,\n    addMessageActionType, InitStateType,\n} from \"../../redux/dialogs-reducer\";\nimport Dialogs from \"./Dialogs\";\nimport {connect} from \"react-redux\";\nimport {WithAuthRedirect} from \"../../hoc/withAuthRedirect\";\nimport {compose} from \"redux\";\n\n\ntype mapStateToPropsType = {\n    messagesPage: InitStateType\n}\ntype mapDispatchToPropsType = {\n    addMessage: (newMessage: string) => void\n}\n\nexport type DialogsMapPropsType = mapStateToPropsType & mapDispatchToPropsType\nconst mapStateToProps = (state: StatesType): mapStateToPropsType => {\n    return {\n        messagesPage: state.messagesPage,\n    }\n}\nconst mapDispatchToProps = (dispatch: (action:addMessageActionType ) => void): mapDispatchToPropsType => {\n    return {\n        addMessage: (newMessage: string) => {\n            dispatch(addMessageAC(newMessage))\n        },\n    }\n}\n\n// const AuthRedirectComponent = WithAuthRedirect(Dialogs)\n// const DialogsContainer = connect(mapStateToProps, mapDispatchToProps)(AuthRedirectComponent);\nexport default compose<ComponentType>(\n    connect(mapStateToProps, mapDispatchToProps),\n    WithAuthRedirect)\n(Dialogs)","import React, {ComponentType} from 'react';\nimport {Navigate} from \"react-router-dom\";\nimport {AppRootStateType} from \"../redux/redux-store\";\nimport {connect} from \"react-redux\";\nimport {UsersMapPropsType} from \"../components/Profile/ProfileContainer\";\nimport {DialogsMapPropsType} from \"../components/Dialogs/DialogsContainer\";\n\ntype mapStateToPropsType = {\n    isAuth: boolean\n}\nconst mapStateToPropsForRedirect = (state: AppRootStateType): mapStateToPropsType => ({\n    isAuth: state.auth.isAuth\n})\nexport function WithAuthRedirect<T>(Component: ComponentType<T> ) {\n    let RedirectComponent = (props: mapStateToPropsType) => {\n        let {isAuth, ...restProps} = props\n        if (!isAuth) return <Navigate to={'/login'} />\n\n        return <Component {...restProps as T}/>;\n    }\n\n    return connect(mapStateToPropsForRedirect)(RedirectComponent);\n};","import objectWithoutPropertiesLoose from \"./objectWithoutPropertiesLoose.js\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}"],"names":["props","className","s","to","id","name","message","onSubmit","formData","sendMessage","newMessage","render","handleSubmit","type","component","placeholder","dialogsElements","messagesPage","dialogs","map","d","messagesElements","messages","m","addMessage","compose","connect","state","dispatch","addMessageAC","WithAuthRedirect","Dialogs","mapStateToPropsForRedirect","isAuth","auth","Component","restProps","source","excluded","key","i","target","objectWithoutPropertiesLoose","Object","getOwnPropertySymbols","sourceSymbolKeys","length","indexOf","prototype","propertyIsEnumerable","call"],"sourceRoot":""}